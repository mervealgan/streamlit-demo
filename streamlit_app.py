import streamlit as st
import joblib
import pandas as pd
from extract_readability import extract_readability_features
from extraction_plongements_camembert import extract_camembert_diff

# Page config
st.set_page_config(
    page_title="Pr√©diction de Lisibilit√©",
    page_icon="üìö",
    layout="wide"
)

# Cache the model loading
@st.cache_resource
def load_model():
    """Load the trained model."""
    try:
        model = joblib.load("random_forest_exp_max_read_model.pkl")
        return model
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le: {e}")
        return None

# Load model
model = load_model()

# Title and description
st.title("üìö Pr√©diction de Lisibilit√© apr√®s Simplification")
st.markdown("""
Cette application pr√©dit le gain de lisibilit√© obtenu en simplifiant un texte.
Entrez votre phrase originale et sa version simplifi√©e pour obtenir une estimation.
""")

# Create two columns for input
col1, col2 = st.columns(2)

with col1:
    st.subheader("Phrase originale")
    original = st.text_area(
        "Entrez la phrase originale ici:",
        height=100,
        placeholder="Tapez votre texte original...",
        key="original"
    )

with col2:
    st.subheader("Phrase simplifi√©e")
    simplified = st.text_area(
        "Entrez la phrase simplifi√©e ici:",
        height=100,
        placeholder="Tapez votre texte simplifi√©...",
        key="simplified"
    )

# Predict button
if st.button("üîç Pr√©dire le gain de lisibilit√©", type="primary"):
    if not original or not simplified:
        st.error("‚ö†Ô∏è Veuillez entrer du texte dans les deux champs.")
    elif not model:
        st.error("‚ùå Le mod√®le n'a pas pu √™tre charg√©.")
    else:
        try:
            with st.spinner("Analyse en cours..."):
                # Extract features
                emb_df = extract_camembert_diff(original, simplified)
                read_df = extract_readability_features(original, simplified)
                
                # Combine features
                full_input = pd.concat([emb_df, read_df], axis=1)
                
                # Make prediction
                pred = model.predict(full_input)[0]
                
                # Display result
                st.success(f"‚úÖ **Gain pr√©dit: {round(pred, 2)}**")
                
                # Additional info
                st.info(f"""
                üìä **Statistiques:**
                - Longueur originale: {len(original)} caract√®res
                - Longueur simplifi√©e: {len(simplified)} caract√®res
                - R√©duction: {len(original) - len(simplified)} caract√®res
                """)
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la pr√©diction: {str(e)}")

# Examples section
st.markdown("---")
st.subheader("üìù Exemples")

example_col1, example_col2 = st.columns(2)

with example_col1:
    if st.button("Exemple 1"):
        st.session_state.original = "Cette m√©thodologie complexe n√©cessite une compr√©hension approfondie des paradigmes th√©oriques."
        st.session_state.simplified = "Cette m√©thode demande de bien comprendre les id√©es de base."
        st.rerun()

with example_col2:
    if st.button("Exemple 2"):
        st.session_state.original = "L'impl√©mentation de cette fonctionnalit√© requiert une expertise technique consid√©rable."
        st.session_state.simplified = "Ajouter cette fonction demande beaucoup de connaissances techniques."
        st.rerun()

# Footer
st.markdown("---")
st.markdown("*D√©velopp√© avec Streamlit*")
